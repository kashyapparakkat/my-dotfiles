 ; how hellow are you
; how hellow are you
; how hellow are you
; how hellow are you
; how hellow are you
(message "loading ")
;; TODO
(defun select-column-till-next-blank-line()
  (interactive)
  (setq start (point))
(set-mark-command nil)
  (setq hpos (- (point) (point-at-bol)))
(re-search-forward "\n[\t\n ]*\n+" nil "NOERROR")
  (if (search-backward-regexp "\n[\t\n ]*\n+" nil "NOERROR")
          (progn (skip-chars-backward "\n\t "))
        (progn (goto-char (point-min)))
        )
(move-to-column hpos t)
  ;; (setq end (point))
(set-mark end)
(set-mark start)
  (activate-mark)
  ;; (call-interactively 'evil-visual-block)
  ;; (evil-visual-block)
 ;; (setq deactivate-mark nil)
)


;; (cibin/global-set-key '("C-S-n" . select-column-till-next-blank-line))

(defun next-line-non-empty-column (arg)
  "Find next line, on the same column, skipping those that would
end up leaving point on a space or newline character."
  (interactive "p")
  (let* ((hpos (- (point) (point-at-bol)))
         (re (format "^.\\{%s\\}[^\n ]" hpos)))
    (cond ((> arg 0)
           (forward-char 1) ; don't match current position (can only happen at column 0)
           (re-search-forward re))
          ((< arg 0)
           (forward-char -1)           ; don't match current position.
           (re-search-backward re)
           (goto-char (match-end 0))))
    ;; now point is after the match, let's go back one column.
    (forward-char -1)))
(defun previous-line-non-empty-column (arg)
  ""
  (interactive "p")
  (next-line-non-empty-column (- arg)))

;; (cibin/global-set-key '("C-S-n" . next-line-non-empty-column))
;; (cibin/global-set-key '("C-S-p" . previous-line-non-empty-column))



;; For parens you can do M-(. For brackets/braces/quotes you could do: 
(cibin/global-set-key '("M-[" . insert-pair))
(cibin/global-set-key '("M-{" . insert-pair))
(cibin/global-set-key '("M-\"" . insert-pair))
;; Note that if you don't have a region highlighted, it will just insert the pair of whatevers and put the cursor in between them. Also handy for deleting matching whatevers is

(cibin/global-set-key '("M-)" . delete-pair))

;; OR
;; https://github.com/nivekuil/corral
(cibin/global-set-key '("M-9" . corral-parentheses-backward))
;; (cibin/global-set-key '("M-0" . corral-parentheses-forward))
 (cibin/global-set-key '("M-[" . corral-brackets-backward))
 (cibin/global-set-key '("M-]" . corral-brackets-forward))
(cibin/global-set-key '("M-{" . corral-braces-backward))
(cibin/global-set-key '("M-}" . corral-braces-forward))
(cibin/global-set-key '("M-\"" . corral-double-quotes-backward))
;; The wrapping algorithm tries to follow these rules:

;; If the point is over a word, it will always wrap around that word.
;; Otherwise, backward and forward commands should have different effects.

(use-package corral
  :config
  (defhydra hydra-corral (:columns 4)
    "Corral"
    ("(" corral-parentheses-backward "Back")
    (")" corral-parentheses-forward "Forward")
    ("[" corral-brackets-backward "Back")
    ("]" corral-brackets-forward "Forward")
    ("{" corral-braces-backward "Back")
    ("}" corral-braces-forward "Forward")
    ("." hydra-repeat "Repeat"))
  )
  (cibin/global-set-key '("C-c c" . hydra-corral/body))


;; http://irreal.org/blog/?p=330
;; sort by rectangle
;; sort by column sort-columns

;; https://www.masteringemacs.org/article/sorting-text-line-field-regexp-emacs
;; sort-fields
;; sort-lines
;; sort-regex-fields



(setq exec-path (append exec-path '("c:/cygwin64/bin")))
(setq find-program "C:\\cygwin64\\bin\\find.exe")

(defun cibin/normal-mode()

  (interactive)
  (message "normal mode")
  ;; (linum-mode 1)
(global-linum-mode 1)
  )

(defun cibin/essential-mode()

  (interactive)
  (message "essential mode")
(linum-mode -1)
(nlinum-mode -1)
;; (global-nlinum-mode-mode -1)
(line-number-mode -1)
(global-linum-mode -1)
(font-lock-mode -1)
(projectile-mode -1)
(spacemacs/toggle-yasnippet-off)

(global-anzu-mode -1)
  )

(defun write-file-to-temp-file ()
  (interactive)
  (setq filepath  "~/.emacs.d/my-files/emacs-temporary/scratch-buffer.txt")
  (write-region (point-min) (point-max) filepath)
  )

(defun return-filepath()
  (interactive)
(if (equal major-mode 'dired-mode)
             (expand-file-name default-directory)
(progn  (if (not (and buffer-file-name (file-exists-p buffer-file-name)))
    (write-file-to-temp-file)
  (buffer-file-name)
  ))
)
)
(defun return-source-path()
  (interactive)
(if (equal major-mode 'dired-mode)
             (expand-file-name default-directory)
(progn  (if (not (and buffer-file-name (file-exists-p buffer-file-name)))
    (write-file-to-temp-file)
 (file-name-directory (buffer-file-name))
  ))
)
)


(defun cibin/faster-mode()

  (interactive)
  (message "faster mode")
(linum-mode -1)
(nlinum-mode -1)
;; (global-nlinum-mode-mode -1)
(line-number-mode -1)
(global-linum-mode -1)
(font-lock-mode -1)
(projectile-mode -1)
(spacemacs/toggle-yasnippet-off)

(global-anzu-mode -1)

(with-demoted-errors

        (cancel-function-timers 'savehist-autosave)
        (cancel-function-timers 'sp-show--pair-function)
        (cancel-function-timers 'show-paren-function)
        (cancel-function-timers 'highlight-thing-loop)
        (cancel-function-timers 'desktop-auto-save)
        (cancel-function-timers 'recentf-save-list)
        (cancel-function-timers 'which-key--update)
        (cancel-function-timers 'jit-lock-context-fontify)
        (cancel-function-timers 'blink-cursor-start)
        (cancel-function-timers 'save-persistent-scratch)
        (cancel-function-timers 'vc-git-root)






        (if (featurep 'ac-ispell           )(unload-feature 'ac-ispell            t)(message "not loaded"))
        (if (featurep 'ace-jump-helm-line  )(unload-feature 'ace-jump-helm-line   t)(message "not loaded"))
        (if (featurep 'ace-link            )(unload-feature 'ace-link             t)(message "not loaded"))
        (if (featurep 'ace-window          )(unload-feature 'ace-window           t)(message "not loaded"))
        (if (featurep 'adaptive-wrap       )(unload-feature 'adaptive-wrap        t)(message "not loaded"))
        (if (featurep 'ag                  )(unload-feature 'ag                   t)(message "not loaded"))
        (if (featurep 'anaconda-mode       )(unload-feature 'anaconda-mode        t)(message "not loaded"))
        (if (featurep 'anzu                )(unload-feature 'anzu                 t)(message "not loaded"))
        (if (featurep 'async               )(unload-feature 'async                t)(message "not loaded"))
        (if (featurep 'auctex              )(unload-feature 'auctex               t)(message "not loaded"))
        (if (featurep 'auto-yasnippet      )(unload-feature 'auto-yasnippet       t)(message "not loaded"))
        (if (featurep 'avy                 )(unload-feature 'avy                  t)(message "not loaded"))
        (if (featurep 'beacon              )(unload-feature 'beacon               t)(message "not loaded"))
        (if (featurep 'buffer-flip         )(unload-feature 'buffer-flip          t)(message "not loaded"))
        (if (featurep 'clean-aindent-mode  )(unload-feature 'clean-aindent-mode   t)(message "not loaded"))
        (if (featurep 'company-flx         )(unload-feature 'company-flx          t)(message "not loaded"))
        (if (featurep 'company-jedi        )(unload-feature 'company-jedi         t)(message "not loaded"))
        (if (featurep 'company-restclient  )(unload-feature 'company-restclient   t)(message "not loaded"))
        (if (featurep 'company-statistics  )(unload-feature 'company-statistics   t)(message "not loaded"))
        (if (featurep 'concurrent          )(unload-feature 'concurrent           t)(message "not loaded"))
        (if (featurep 'corral              )(unload-feature 'corral               t)(message "not loaded"))
        (if (featurep 'counsel             )(unload-feature 'counsel              t)(message "not loaded"))
        (if (featurep 'ctable              )(unload-feature 'ctable               t)(message "not loaded"))
        (if (featurep 'dash                )(unload-feature 'dash                 t)(message "not loaded"))
        (if (featurep 'deferred            )(unload-feature 'deferred             t)(message "not loaded"))
        (if (featurep 'define-word         )(unload-feature 'define-word          t)(message "not loaded"))
        (if (featurep 'diminish            )(unload-feature 'diminish             t)(message "not loaded"))
        (if (featurep 'dired+              )(unload-feature 'dired+               t)(message "not loaded"))
        (if (featurep 'dired-filter        )(unload-feature 'dired-filter         t)(message "not loaded"))
        (if (featurep 'dired-hacks-utils   )(unload-feature 'dired-hacks-utils    t)(message "not loaded"))
        (if (featurep 'dired-k             )(unload-feature 'dired-k              t)(message "not loaded"))
        (if (featurep 'dired-narrow        )(unload-feature 'dired-narrow         t)(message "not loaded"))
        (if (featurep 'dired-quick-sort    )(unload-feature 'dired-quick-sort     t)(message "not loaded"))
        (if (featurep 'dired-subtree       )(unload-feature 'dired-subtree        t)(message "not loaded"))
        (if (featurep 'drag-stuff          )(unload-feature 'drag-stuff           t)(message "not loaded"))
        (if (featurep 'dumb-jump           )(unload-feature 'dumb-jump            t)(message "not loaded"))
        (if (featurep 'elisp-slime-nav     )(unload-feature 'elisp-slime-nav      t)(message "not loaded"))
        (if (featurep 'elpy                )(unload-feature 'elpy                 t)(message "not loaded"))
        (if (featurep 'epc                 )(unload-feature 'epc                  t)(message "not loaded"))
        (if (featurep 'epl                 )(unload-feature 'epl                  t)(message "not loaded"))
        (if (featurep 'evil                )(unload-feature 'evil                 t)(message "not loaded"))
        (if (featurep 'evil-anzu           )(unload-feature 'evil-anzu            t)(message "not loaded"))
        (if (featurep 'evil-args           )(unload-feature 'evil-args            t)(message "not loaded"))
        (if (featurep 'evil-ediff          )(unload-feature 'evil-ediff           t)(message "not loaded"))
        (if (featurep 'peep-dired          )(unload-feature 'peep-dired           t)(message "not loaded"))
        (if (featurep 'golden-ratio        )(unload-feature 'golden-ratio         t)(message "not loaded"))
        (if (featurep 'evil-escape         )(unload-feature 'evil-escape          t)(message "not loaded"))
        (if (featurep 'evil-exchange       )(unload-feature 'evil-exchange        t)(message "not loaded"))
        (if (featurep 'evil-iedit-state    )(unload-feature 'evil-iedit-state     t)(message "not loaded"))
        (if (featurep 'evil-indent-plus    )(unload-feature 'evil-indent-plus     t)(message "not loaded"))
        (if (featurep 'evil-matchit        )(unload-feature 'evil-matchit         t)(message "not loaded"))
        (if (featurep 'evil-mc             )(unload-feature 'evil-mc              t)(message "not loaded"))
        (if (featurep 'evil-numbers        )(unload-feature 'evil-numbers         t)(message "not loaded"))
        (if (featurep 'evil-surround       )(unload-feature 'evil-surround        t)(message "not loaded"))
        (if (featurep 'evil-tutor          )(unload-feature 'evil-tutor           t)(message "not loaded"))
        (if (featurep 'evil-unimpaired     )(unload-feature 'evil-unimpaired      t)(message "not loaded"))
        (if (featurep 'evil-visualstar     )(unload-feature 'evil-visualstar      t)(message "not loaded"))
        (if (featurep 'eww-lnum            )(unload-feature 'eww-lnum             t)(message "not loaded"))
        (if (featurep 'expand-region       )(unload-feature 'expand-region        t)(message "not loaded"))
        (if (featurep 'eyebrowse           )(unload-feature 'eyebrowse            t)(message "not loaded"))
        (if (featurep 'f                   )(unload-feature 'f                    t)(message "not loaded"))
        (if (featurep 'fancy-battery       )(unload-feature 'fancy-battery        t)(message "not loaded"))
        ;; (if (featurep 'flx                 )(unload-feature 'flx                  t)(message "not loaded"))
        ;; (if (featurep 'flx-ido             )(unload-feature 'flx-ido              t)(message "not loaded"))
        (if (featurep 'flycheck            )(unload-feature 'flycheck             t)(message "not loaded"))
        (if (featurep 'flymake-cursor      )(unload-feature 'flymake-cursor       t)(message "not loaded"))
        (if (featurep 'flyspell-popup      )(unload-feature 'flyspell-popup       t)(message "not loaded"))
        (if (featurep 'free-keys           )(unload-feature 'free-keys            t)(message "not loaded"))
        (if (featurep 'fuzzy               )(unload-feature 'fuzzy                t)(message "not loaded"))
        (if (featurep 'git-commit          )(unload-feature 'git-commit           t)(message "not loaded"))
        (if (featurep 'google-translate    )(unload-feature 'google-translate     t)(message "not loaded"))
        (if (featurep 'goto-chg            )(unload-feature 'goto-chg             t)(message "not loaded"))
        (if (featurep 'helm-ag             )(unload-feature 'helm-ag              t)(message "not loaded"))
        (if (featurep 'helm-c-yasnippet    )(unload-feature 'helm-c-yasnippet     t)(message "not loaded"))
        (if (featurep 'helm-company        )(unload-feature 'helm-company         t)(message "not loaded"))
        (if (featurep 'helm-core           )(unload-feature 'helm-core            t)(message "not loaded"))
        (if (featurep 'helm-descbinds      )(unload-feature 'helm-descbinds       t)(message "not loaded"))
        (if (featurep 'helm-flyspell       )(unload-feature 'helm-flyspell        t)(message "not loaded"))
        (if (featurep 'helm-make           )(unload-feature 'helm-make            t)(message "not loaded"))
        (if (featurep 'helm-mode-manager   )(unload-feature 'helm-mode-manager    t)(message "not loaded"))
        (if (featurep 'helm-projectile     )(unload-feature 'helm-projectile      t)(message "not loaded"))
        (if (featurep 'helm-swoop          )(unload-feature 'helm-swoop           t)(message "not loaded"))
        (if (featurep 'helm-themes         )(unload-feature 'helm-themes          t)(message "not loaded"))
        (if (featurep 'help-fns+           )(unload-feature 'help-fns+            t)(message "not loaded"))
        (if (featurep 'hide-comnt          )(unload-feature 'hide-comnt           t)(message "not loaded"))
        (if (featurep 'hl-todo             )(unload-feature 'hl-todo              t)(message "not loaded"))
        (if (featurep 'hungry-delete       )(unload-feature 'hungry-delete        t)(message "not loaded"))
        (if (featurep 'ido-sort-mtime      )(unload-feature 'ido-sort-mtime       t)(message "not loaded"))
        ;; (if (featurep 'ido-vertical-mode   )(unload-feature 'ido-vertical-mode    t)(message "not loaded"))
        (if (featurep 'iedit               )(unload-feature 'iedit                t)(message "not loaded"))
        (if (featurep 'indent-guide        )(unload-feature 'indent-guide         t)(message "not loaded"))
        (if (featurep 'info+               )(unload-feature 'info+                t)(message "not loaded"))
        (if (featurep 'isearch-dabbrev     )(unload-feature 'isearch-dabbrev      t)(message "not loaded"))
        (if (featurep 'isend-mode          )(unload-feature 'isend-mode           t)(message "not loaded"))
        (if (featurep 'ivy                 )(unload-feature 'ivy                  t)(message "not loaded"))
        (if (featurep 'ivy-hydra           )(unload-feature 'ivy-hydra            t)(message "not loaded"))
        (if (featurep 'jedi                )(unload-feature 'jedi                 t)(message "not loaded"))
        (if (featurep 'jedi-core           )(unload-feature 'jedi-core            t)(message "not loaded"))
        (if (featurep 'keyfreq             )(unload-feature 'keyfreq              t)(message "not loaded"))
        (if (featurep 'link-hint           )(unload-feature 'link-hint            t)(message "not loaded"))
        (if (featurep 'linum-relative      )(unload-feature 'linum-relative       t)(message "not loaded"))
        (if (featurep 'lorem-ipsum         )(unload-feature 'lorem-ipsum          t)(message "not loaded"))
        (if (featurep 'macrostep           )(unload-feature 'macrostep            t)(message "not loaded"))
        (if (featurep 'magit               )(unload-feature 'magit                t)(message "not loaded"))
        (if (featurep 'magit-popup         )(unload-feature 'magit-popup          t)(message "not loaded"))
        (if (featurep 'markdown-mode       )(unload-feature 'markdown-mode        t)(message "not loaded"))
        (if (featurep 'multiple-cursors    )(unload-feature 'multiple-cursors     t)(message "not loaded"))
        (if (featurep 'neotree             )(unload-feature 'neotree              t)(message "not loaded"))
        (if (featurep 'ob-http             )(unload-feature 'ob-http              t)(message "not loaded"))
        (if (featurep 'ob-restclient       )(unload-feature 'ob-restclient        t)(message "not loaded"))
        (if (featurep 'open-junk-file      )(unload-feature 'open-junk-file       t)(message "not loaded"))
        (if (featurep 'org-bullets         )(unload-feature 'org-bullets          t)(message "not loaded"))
        (if (featurep 'org-plus-contrib    )(unload-feature 'org-plus-contrib     t)(message "not loaded"))
        (if (featurep 'package-build       )(unload-feature 'package-build        t)(message "not loaded"))
        (if (featurep 'packed              )(unload-feature 'packed               t)(message "not loaded"))
        (if (featurep 'paradox             )(unload-feature 'paradox              t)(message "not loaded"))
        (if (featurep 'parent-mode         )(unload-feature 'parent-mode          t)(message "not loaded"))
        (if (featurep 'pcre2el             )(unload-feature 'pcre2el              t)(message "not loaded"))
        (if (featurep 'pkg-info            )(unload-feature 'pkg-info             t)(message "not loaded"))
        (if (featurep 'popup               )(unload-feature 'popup                t)(message "not loaded"))
        (if (featurep 'projectile          )(unload-feature 'projectile           t)(message "not loaded"))
        (if (featurep 'python-environment  )(unload-feature 'python-environment   t)(message "not loaded"))
        (if (featurep 'pythonic            )(unload-feature 'pythonic             t)(message "not loaded"))
        (if (featurep 'pyvenv              )(unload-feature 'pyvenv               t)(message "not loaded"))
        (if (featurep 'quelpa              )(unload-feature 'quelpa               t)(message "not loaded"))
        (if (featurep 'quick-preview       )(unload-feature 'quick-preview        t)(message "not loaded"))
        (if (featurep 'quickrun            )(unload-feature 'quickrun             t)(message "not loaded"))
        (if (featurep 'rainbow-delimiters  )(unload-feature 'rainbow-delimiters   t)(message "not loaded"))
        (if (featurep 'rainbow-mode        )(unload-feature 'rainbow-mode         t)(message "not loaded"))
        (if (featurep 'ranger              )(unload-feature 'ranger               t)(message "not loaded"))
        (if (featurep 'realgud             )(unload-feature 'realgud              t)(message "not loaded"))
        (if (featurep 'request             )(unload-feature 'request              t)(message "not loaded"))
        (if (featurep 'restart-emacs       )(unload-feature 'restart-emacs        t)(message "not loaded"))
        (if (featurep 'restclient          )(unload-feature 'restclient           t)(message "not loaded"))
        (if (featurep 's                   )(unload-feature 's                    t)(message "not loaded"))
        (if (featurep 'seq                 )(unload-feature 'seq                  t)(message "not loaded"))
        (if (featurep 'shell-here          )(unload-feature 'shell-here           t)(message "not loaded"))
        (if (featurep 'shell-pop           )(unload-feature 'shell-pop            t)(message "not loaded"))
        (if (featurep 'shrink-whitespace   )(unload-feature 'shrink-whitespace    t)(message "not loaded"))
        (if (featurep 'smex                )(unload-feature 'smex                 t)(message "not loaded"))
        (if (featurep 'solarized-theme     )(unload-feature 'solarized-theme      t)(message "not loaded"))
        (if (featurep 'spaceline           )(unload-feature 'spaceline            t)(message "not loaded"))
        (if (featurep 'spacemacs-theme     )(unload-feature 'spacemacs-theme      t)(message "not loaded"))
        (if (featurep 'spinner             )(unload-feature 'spinner              t)(message "not loaded"))
        (if (featurep 'toc-org             )(unload-feature 'toc-org              t)(message "not loaded"))
        (if (featurep 'undo-tree           )(unload-feature 'undo-tree            t)(message "not loaded"))
        (if (featurep 'uuidgen             )(unload-feature 'uuidgen              t)(message "not loaded"))
        (if (featurep 'vdiff               )(unload-feature 'vdiff                t)(message "not loaded"))
        (if (featurep 'vi-tilde-fringe     )(unload-feature 'vi-tilde-fringe      t)(message "not loaded"))
        (if (featurep 'visible-mark        )(unload-feature 'visible-mark         t)(message "not loaded"))
        (if (featurep 'visual-regexp       )(unload-feature 'visual-regexp        t)(message "not loaded"))
        (if (featurep 'with-editor         )(unload-feature 'with-editor          t)(message "not loaded"))
        (if (featurep 'ws-butler           )(unload-feature 'ws-butler            t)(message "not loaded"))
        (if (featurep 'xahk-mode           )(unload-feature 'xahk-mode            t)(message "not loaded"))
        ;; (if (featurep 'yascroll            )(unload-feature 'yascroll             t)(message "not loaded"))
        ;; (if (featurep 'yasnippet           )(unload-feature 'yasnippet            t)(message "not loaded"))
        )

)



(provide 'added-april)
